/*
visitas del Paciente
medicos tratantes
pacientes tratados por medico
pacientes tratados por ServicioMedico
es atendido por mas de 1 medico?
lista mensual de los honorarios
*/

const
    PP = 50

var
    i, nuevoid, indiceespaciovacio, IDBuscado : numerico
    eleccion : numerico 
    siono : logico

    Pacientes : vector [PP] registro
{
	nombre : cadena
	ids :vector [PP] numerico
	FdUC : cadena
	direccion :cadena
	telefono : cadena
	medicotratante : cadena
}
    Medicos : vector [PP] registro
{
	id : numerico
	nombre : cadena
	honorario : numerico
	pacientespormes : numerico
	honorariostotal : numerico
}
    ServiciosMedicos : vector [PP] registro
{
	pediatria : cadena
	neurologia : cadena
	oncologia : cadena
}

inicio

//armar menu
cls()
	inicializacionMedicos()
    inicializacionServiciosMedicos()
    
// menu 
//	1 - buscar paciente
//  2 - reporte Mensual
//		1	- visita del paciente
//		2	- Medicos tratantes por paciente 
//      3	- Veces por ServicioMedico
//      4	- pacientes mes por medico
//      5	- lista de honorarios
 

    imprimir("1 - Buscar Paciente\n2 - Reporte Mensual\n")
    leer(eleccion)
    si eleccion == 1
    {
        imprimir("introduzca su id \n")
		leer (IDBuscado)
        BuscaIDs (IDBuscado)
        si BuscaIDs == false
        {
            CrearPaciente()
				sino
					imprimir(Pacientes[indiceElemento])
        }
		
        
    }
    si eleccion == 2
    {
		imprimir("1 - visitas del paciente\n2 - Medicos Tratantes Por Paciente\n3 - Pacientes Atendidos Por Servicio Medico\n4 - Pacientes Atendidos Por Medico\n5 - Lista De Honorarios")
		leer(eleccion)
		si eleccion == 1
		{

		}
		si eleccion == 2
		{

		}
		si eleccion == 3
		{

		}
		si eleccion == 4
		{

		}
		si eleccion == 5
		{
			listahonorarios()
		}
	}


fin



subrutina inicializacionServiciosMedicos
var

inicio
fin

subrutina inicializacionMedicos()

    Medicos[1].nombre = "Leandro Sanz"
	Medicos[1].id = 1
	Medicos[1].honorario = 440
	Medicos[1].pacientespormes = random(200)

	Medicos[2].nombre = "Agustin carrocera"
	Medicos[2].id = 2
	Medicos[2].honorario = 430
	Medicos[1].pacientespormes = random(200)
	
	Medicos[3].nombre = "valentin bakker"
	Medicos[3].id = 3
	Medicos[3].honorario = 420
	Medicos[1].pacientespormes = random(200)

	Medicos[4].nombre = "Ginna galli"
	Medicos[4].id = 4
	Medicos[4].honorario = 360
	Medicos[1].pacientespormes = random(200)

	Medicos[5].nombre = "Dante Jorgensen"
	Medicos[5].id = 5
	Medicos[5].honorario = 400
	Medicos[1].pacientespormes = random(200)

    fin

subrutina visitasdelpaciente ()

    fin

subrutina medicostratantes ()

    fin

subrutina pacientestratadospormedico()

    fin

subrutina pacientestratadosporServicioMedico ()

    fin

subrutina medicosxpaciente()
	var
	
	inicio
    
	fin

subrutina listahonorarios()
	var
	inicio
		inicializacionMedicos()
		desde i = 1 hasta i = 6
		{
			imprimir (Medicos[i].nombre\n)
			imprimir (Medicos[i].honorario\n)
			imprimir ("Cantidad de Pacientes tratados este mes: ", Medicos[i].pacientespormes\n)
			Medicos[i].honorariostotal=Medicos[i].honorario*Medicos[i].pacientespormes
			imprimir (Medicos[i].honorariostotal)
		}

    fin

subrutina BuscaIDs(ref ids : vector [PP] numerico; DatoBuscado : numerico) retorna numerico
var

	j, indiceElemento : numerico
	encontrado : logico
inicio
	j = 1
	encontrado = FALSE
	indiceElemento = 0
	mientras (j <= PP and not(encontrado))
	{
		si(array[j] == DatoBuscado)
		{
			encontrado = TRUE
			indiceElemento = j
		}
		j = j + 1
	}
	retorna(indiceElemento)
fin

subrutina CrearPaciente ()
    var

    inicio
    	nuevoid = NuevoID()
	    indiceespaciovacio = BuscarEspacioVacio()
    	si (indiceespaciovacio == -1)
    	{
	    	Paciente[i].[indiceespaciovacio] = Pacientes[i].nombre
		    Paciente[i].id[indiceespaciovacio] = nuevoid
	    }   
        imprimir("introduzca su nombre \n")
    	leer(Pacientes[i].nombre)
    	BuscarEspacioVacio(Pacientes[i])
        Pacientes[indiceespaciovacio] = Pacientes[i].nombre
    	imprimir("introduzca su direccion\n")
    	leer(Paciente.direccion)
    	imprimir("introduzca un numero de telefono\n")
    	leer(Paciente[i].telefono)
    	imprimir("introduzca el area de consulta\n")
    	leer(Paciente[i])
        retorna()            
fin

subrutina NuevoID () retorna numerico
    var
    idmasgrande : numerico
    inicio
    	idmasgrande = 0
    	desde i = 1 hasta PP + 1 
    	{
    		si(Paciente.pacientesid[i] > idmasgrande)
    		{
    			idmasgrande = Pacientes[i].ids
    			i = i + 1
    		}
    	}
    retorna (idmasgrande + 1)

fin	

subrutina BuscarEspacioVacio (arreglo:vector[PP]numerico) retorna numerico
var
    indiceespaciovacio : numerico
inicio
    desde i = 1 hasta PP + 1
    {
	    si(Paciente[i].id == 0)
    	{
    		indiceespaciovacio = i
    		sino
    			indiceespaciovacio = -1
    	}

    }	
    retorna(indiceespaciovacio)
fin